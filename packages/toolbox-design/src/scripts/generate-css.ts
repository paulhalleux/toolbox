import Bun from "bun";
import fs from "node:fs";
import { flattenLibrary } from "../utils/library";
import { tokenLibrary } from "../tokens";
import { ThemedVariableList, CssVariable } from "../utils/themed-variable-list";
import {
  DesignToken,
  DesignTokenKind,
  DesignTokenLibrary,
  TokenReference,
  ValuedToken,
} from "../types";
import get from "lodash/get";

const OUT_PATH = "dist/styles/tokens.css";

/**
 * Generate the CSS file from the design token library
 */
const generateCss = async () => {
  const flatLibrary = flattenLibrary(tokenLibrary);
  const variables = new ThemedVariableList();

  for (const token of Object.values(flatLibrary)) {
    const cssVariables = getCssVariables(token, tokenLibrary);
    cssVariables.forEach((variable) =>
      variables.addVariable(variable.theme, variable),
    );
  }

  const cssFile =
    "/* This file is generated by the design system. Do not edit it manually. */\n\n" +
    variables.stringify();

  if (fs.existsSync(OUT_PATH)) fs.unlinkSync(OUT_PATH);
  await Bun.write(OUT_PATH, cssFile);
};

/**
 * Get the CSS variable for a design token
 * @param token The design token
 * @param library The design token library
 * @returns The CSS variable
 */
function getCssVariables(
  token: DesignToken,
  library: DesignTokenLibrary,
): CssVariable[] {
  if ("$value" in token) {
    const variable = {
      theme: "global",
      value: getTokenValue(token, library),
      name: token.$name,
    };
    return [variable];
  }

  return Object.entries(token.$themeValues).map(([theme, value]) => {
    return {
      theme: theme,
      value: getTokenValue(value, library),
      name: token.$name,
    };
  });
}

/**
 * Get the value of a token
 * @param value The token value
 * @param library The design token library
 * @returns The token value
 */
function getTokenValue<Kind extends DesignTokenKind>(
  value: ValuedToken<Kind, string | number | object | TokenReference>,
  library: DesignTokenLibrary,
): string {
  if (typeof value.$value === "object") {
    switch (value.$kind) {
      case DesignTokenKind.Color:
        return getTokenValue(
          value.$value as ValuedToken<DesignTokenKind.Color, string>,
          library,
        );
      default:
        return "";
    }
  }

  const stringValue = value.$value.toString();

  if (stringValue.startsWith("$ref:")) {
    const reference = stringValue.replace("$ref:", "");
    return getTokenValue(get(library, reference) as any, library);
  }

  switch (value.$kind) {
    case DesignTokenKind.Size:
      return stringValue.endsWith("px") ? stringValue : `${stringValue}px`;
    default:
      return stringValue;
  }
}

generateCss();
